{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Rate, Button, Radio, Progress, message } from \"antd\";\nimport Countdown, { zeroPad } from \"react-countdown\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport classNames from \"classnames\";\nimport { formatCurrency } from \"../../../common/utils\";\nimport { addToCart } from \"../../../redux/actions/cartActions\";\nimport { checkAvaiableQuantityToAdd } from \"../../../common/shopUtils\";\nimport QuantitySelector from \"../../controls/QuantitySelector\";\nimport ProductGuaranteed from \"../elements/ProductGuaranteed\";\n\nfunction ProductDetailContentOne({\n  data,\n  onAddedToCart,\n  hideGuaranteed,\n  quantityControllerNoRound,\n  showCountdown\n}) {\n  const dispatch = useDispatch();\n  const {\n    0: quantity,\n    1: setQuantity\n  } = useState(1);\n  const {\n    0: currentColor,\n    1: setCurrentColor\n  } = useState(\"none\");\n  const {\n    0: currentSize,\n    1: setCurrentSize\n  } = useState(\"none\");\n  const globalState = useSelector(state => state.globalReducer);\n  const cartState = useSelector(state => state.cartReducer);\n  const avaiableQuantity = checkAvaiableQuantityToAdd(cartState, data);\n  const {\n    currency,\n    locales\n  } = globalState.currency;\n\n  const onAddProductToCart = data => {\n    if (avaiableQuantity === 0) {\n      return;\n    }\n\n    dispatch(addToCart(data, quantity, currentColor, currentSize));\n    onAddedToCart && onAddedToCart();\n    message.success(\"Product added to cart successfully\");\n  };\n\n  const onChooseSize = e => {\n    setCurrentSize(e.target.value);\n  };\n\n  const onChooseColor = e => {\n    setCurrentColor(e.target.value);\n  };\n\n  return __jsx(\"div\", {\n    className: \"product-detail-content-one\"\n  }, __jsx(\"h3\", null, data.name), __jsx(\"div\", {\n    className: \"product-detail-content-one-rate\"\n  }, __jsx(Rate, {\n    disabled: true,\n    defaultValue: data.rate\n  }), __jsx(\"span\", {\n    className: \"product-detail-content-one-review-count\"\n  }, \"- 5 Reviews\")), __jsx(\"div\", {\n    className: \"product-detail-content-one-price\"\n  }, __jsx(\"h5\", null, data.discount ? formatCurrency(data.price - data.discount, locales, currency) : formatCurrency(data.price, locales, currency)), data.discount && __jsx(\"span\", null, formatCurrency(data.price, locales, currency))), __jsx(\"p\", {\n    className: \"product-detail-content-one-description\"\n  }, \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Excepturi illo possimus quae tenetur. Porro aliquam quaerat dolorum pariatur molestias commodi ipsa\"), showCountdown && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"product-detail-content-one-countdown\"\n  }, __jsx(\"h3\", null, \"Hurry Up ! Sales end in :\"), __jsx(\"div\", {\n    className: \"product-detail-content-one-countdown__items\"\n  }, __jsx(Countdown, {\n    date: Date.now() + 100000000,\n    renderer: ({\n      days,\n      hours,\n      minutes,\n      seconds,\n      completed\n    }) => __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"product-detail-content-one-countdown__item\"\n    }, __jsx(\"div\", null, zeroPad(days)), __jsx(\"span\", null, \"days\")), \":\", __jsx(\"div\", {\n      className: \"product-detail-content-one-countdown__item\"\n    }, __jsx(\"div\", null, zeroPad(hours)), __jsx(\"span\", null, \"hours\")), \":\", __jsx(\"div\", {\n      className: \"product-detail-content-one-countdown__item\"\n    }, __jsx(\"div\", null, zeroPad(minutes)), __jsx(\"span\", null, \"mins\")), \":\", __jsx(\"div\", {\n      className: \"product-detail-content-one-countdown__item\"\n    }, __jsx(\"div\", null, zeroPad(seconds)), __jsx(\"span\", null, \"secs\")))\n  })), __jsx(\"div\", {\n    className: \"product-detail-content-one-countdown__sold\"\n  }, __jsx(Progress, {\n    percent: 50,\n    showInfo: false\n  }), __jsx(\"div\", {\n    className: \"sold-data\"\n  }, __jsx(\"h5\", null, \"Already Sold:\", __jsx(\"span\", null, \"20\")), __jsx(\"h5\", null, \"Total:\", __jsx(\"span\", null, \"20\")))))), __jsx(\"div\", {\n    className: \"product-detail-content-one-variation\"\n  }, data.size && __jsx(\"div\", {\n    className: \"variation-item -size\"\n  }, __jsx(React.Fragment, null, __jsx(\"p\", null, \"Size:\"), __jsx(Radio.Group, {\n    onChange: onChooseSize,\n    defaultValue: \"a\"\n  }, data.size.map((item, index) => __jsx(Radio.Button, {\n    key: index,\n    value: item.name\n  }, item.name))))), data.variation && __jsx(\"div\", {\n    className: \"variation-item -color\"\n  }, __jsx(React.Fragment, null, __jsx(\"p\", null, \"Color:\"), __jsx(Radio.Group, {\n    onChange: onChooseColor,\n    defaultValue: \"a\"\n  }, data.variation.map((item, index) => __jsx(Radio.Button, {\n    key: index,\n    value: item.color,\n    style: {\n      backgroundColor: item.colorCode\n    }\n  })))))), __jsx(\"div\", {\n    className: \"product-detail-content-one-actions\"\n  }, __jsx(QuantitySelector, {\n    noRound: quantityControllerNoRound,\n    defaultValue: 1,\n    onChange: val => setQuantity(val),\n    size: \"big\",\n    max: checkAvaiableQuantityToAdd(cartState, data)\n  }), __jsx(Button, {\n    onClick: () => onAddProductToCart(data),\n    disabled: avaiableQuantity === 0,\n    className: `product-detail-content-one-atc ${classNames({\n      disabled: avaiableQuantity === 0\n    })}`,\n    type: \"link\",\n    danger: true\n  }, \"Add to cart\")), !hideGuaranteed && __jsx(ProductGuaranteed, null));\n}\n\nexport default React.memo(ProductDetailContentOne);","map":null,"metadata":{},"sourceType":"module"}