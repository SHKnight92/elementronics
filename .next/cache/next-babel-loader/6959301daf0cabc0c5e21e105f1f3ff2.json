{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Select, Button, AutoComplete } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport { SHOP } from \"../../../common/defines\";\nimport { getProductsByCategory } from \"../../../common/shopUtils\";\nimport { setGlobalCategory, setGlobalSearch } from \"../../../redux/actions/globalActions\";\nimport { setSubCategory } from \"../../../redux/actions/shopActions\";\nimport useDebounce from \"../../../common/useDebound\";\n\nfunction SearchBarMobile(_ref) {\n  var fillData = _ref.fillData,\n      placeholder = _ref.placeholder;\n  var Option = Select.Option;\n  var router = useRouter();\n  var dispatch = useDispatch();\n\n  var _useState = useState(\"\"),\n      search = _useState[0],\n      setSearch = _useState[1];\n\n  var _useState2 = useState(false),\n      showDropdownOptions = _useState2[0],\n      setShowDropdownOptions = _useState2[1];\n\n  var globalState = useSelector(function (state) {\n    return state.globalReducer;\n  });\n  var deboundValue = useDebounce(search, 300);\n  useEffect(function () {\n    dispatch(setGlobalSearch(deboundValue));\n  }, [deboundValue]);\n\n  var renderAutoFillItem = function renderAutoFillItem() {\n    var product = getProductsByCategory(fillData, globalState.category);\n    return product.map(function (item) {\n      return {\n        value: item.name\n      };\n    });\n  };\n\n  var onSelectCateory = function onSelectCateory(value) {\n    dispatch(setGlobalCategory(value));\n    dispatch(setSubCategory(\"\"));\n  };\n\n  var openDropdownOption = function openDropdownOption(value) {\n    setShowDropdownOptions(true);\n    setSearch(value);\n  };\n\n  var closeDropdownOption = function closeDropdownOption() {\n    setShowDropdownOptions(false);\n  };\n\n  var onSelectOption = function onSelectOption(value, option) {\n    setSearch(value);\n    closeDropdownOption();\n  };\n\n  var onSearch = function onSearch() {\n    if (!search || search === \"\") {\n      router.push(\"/\");\n    } else {\n      router.push({\n        pathname: \"/\",\n        query: {\n          q: search\n        }\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"menu-search\"\n  }, __jsx(\"div\", {\n    className: \"menu-search__form\"\n  }, __jsx(Select, {\n    className: \"menu-search__form-select\",\n    defaultValue: globalState.category,\n    style: {\n      width: 120\n    },\n    onChange: onSelectCateory,\n    value: globalState.category\n  }, SHOP.category.map(function (item, index) {\n    return __jsx(Option, {\n      key: index,\n      value: item.name\n    }, item.name);\n  })), __jsx(\"div\", {\n    className: \"menu-search__form-input\"\n  }, __jsx(AutoComplete, {\n    allowClear: true,\n    backfill: true,\n    open: showDropdownOptions,\n    onSearch: openDropdownOption,\n    onBlur: closeDropdownOption,\n    onSelect: onSelectOption,\n    options: renderAutoFillItem(),\n    placeholder: placeholder,\n    filterOption: function filterOption(inputValue, option) {\n      return option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1;\n    }\n  }), __jsx(Button, {\n    onClick: onSearch\n  }, __jsx(\"i\", {\n    className: \"icon_search\"\n  })))));\n}\n\nexport default React.memo(SearchBarMobile);","map":null,"metadata":{},"sourceType":"module"}