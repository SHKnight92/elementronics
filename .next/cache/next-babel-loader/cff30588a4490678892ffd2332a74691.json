{"ast":null,"code":"//Products\nexport const getProductsByCategory = (arr, category) => {\n  return category ? arr.filter(item => item.category.toLowerCase() === category.toLowerCase()) : arr;\n};\nexport const getProductsBySlug = (arr, slug) => {\n  return slug && typeof slug === \"string\" ? arr.find(p => p.slug.toLowerCase() === slug.toLowerCase()) : arr;\n};\nexport const getAllValuesOfKey = (arr, key) => {\n  if (key && typeof key === \"string\") {\n    let subCategory = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (!subCategory.includes(arr[i][key])) {\n        subCategory.push(arr[i][key]);\n      }\n    }\n\n    return subCategory.length > 0 ? subCategory : null;\n  } else {\n    return null;\n  }\n};\nexport const getAllSubCategories = (arr, category) => {\n  if (category && typeof category === \"string\") {\n    let products = getProducts(arr, category);\n    let subCategoriesArr = getAllValuesOfKey(products, \"subCategory\");\n    return subCategoriesArr !== null ? subCategoriesArr : null;\n  } else {\n    return null;\n  }\n};\nexport const getProductsBySort = (products, type) => {\n  function sortWithCondition(arr, value, reverse = false) {\n    let num = reverse ? -1 : 1;\n    return arr.sort((a, b) => {\n      if (a[value] < b[value]) {\n        return -1 * num;\n      }\n\n      if (a[value] > b[value]) {\n        return 1 * num;\n      }\n\n      return 0;\n    });\n  }\n\n  if (type === \"az\") {\n    return sortWithCondition(products, \"name\");\n  } else if (type === \"za\") {\n    return sortWithCondition(products, \"name\", true);\n  } else if (type === \"lowHigh\") {\n    return sortWithCondition(products, \"price\");\n  } else if (type === \"highLow\") {\n    return sortWithCondition(products, \"price\", true);\n  } else {\n    return products;\n  }\n};\nexport const getProductsByFilter = (products, sortType, subCategory) => {\n  let filteredProduct = subCategory ? products.filter(product => product.subCategory.toLowerCase() === subCategory.toLowerCase()) : products;\n  return getProductsBySort(filteredProduct, sortType);\n};\nexport const getProductsBySearch = (products, keyword) => {\n  return keyword && keyword !== \"\" ? products.filter(product => product.name.toLowerCase().includes(keyword.toLowerCase())) : products;\n}; //Cart\n\nexport const getTotalProductInCart = arr => {\n  return arr ? arr.reduce((total, item) => total + item.cartQuantity, 0) : 0;\n};\nexport const calculateTotalPrice = arr => {\n  let total = 0;\n  arr.forEach(item => {\n    if (item.discount) {\n      total += item.cartQuantity ? (item.price - item.discount) * item.cartQuantity : item.price - item.discount;\n    } else {\n      total += item.cartQuantity ? item.price * item.cartQuantity : item.price;\n    }\n  });\n  return total;\n};\nexport const checkProductInCart = (cartArr, pid) => {\n  return pid ? cartArr.find(item => item.id === pid) : null;\n};\nexport const checkAvaiableQuantityToAdd = (arr, product) => {\n  const productsInCart = arr.filter(item => item.id === product.id);\n\n  if (productsInCart && productsInCart.length > 0) {\n    const totalProductQuantityInCart = productsInCart.length > 0 && productsInCart.reduce((total, item) => total + item.cartQuantity, 0);\n    let avaiable = product.quantity - totalProductQuantityInCart;\n    return avaiable < 1 ? 0 : avaiable;\n  } else {\n    product.quantity;\n  }\n}; //Wishlist\n\nexport const checkProductInWishlist = (wishlistArr, pid) => {\n  return pid ? wishlistArr.find(item => item.id === pid) : null;\n};","map":null,"metadata":{},"sourceType":"module"}