{"ast":null,"code":"var _jsxFileName = \"E:\\\\stora-next\\\\Elementronics\\\\src\\\\components\\\\header\\\\elements\\\\SearchBar.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Select, Button, AutoComplete } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport { SHOP } from \"../../../common/defines\"; // import { getProductsByCategory } from \"../../../common/shopUtils\";\n\nimport { setGlobalCategory, setGlobalSearch } from \"../../../redux/actions/globalActions\";\nimport { setSubCategory } from \"../../../redux/actions/shopActions\";\nimport useDebounce from \"../../../common/useDebound\";\n\nfunction SearchBarMobile({\n  fillData,\n  placeholder\n}) {\n  const {\n    Option\n  } = Select; // const router = useRouter();\n\n  const dispatch = useDispatch();\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\"); // const [showDropdownOptions, setShowDropdownOptions] = useState(false);\n\n  const globalState = useSelector(state => state.globalReducer);\n  const deboundValue = useDebounce(search, 300);\n  useEffect(() => {\n    dispatch(setGlobalSearch(deboundValue));\n  }, [deboundValue]); // const renderAutoFillItem = () => {\n  //   let product = getProductsByCategory(fillData, globalState.category);\n  //   return product.map((item) => ({\n  //     value: item.name,\n  //   }));\n  // };\n\n  const onSelectCateory = value => {\n    dispatch(setGlobalCategory(value));\n    dispatch(setSubCategory(\"\"));\n  }; // const openDropdownOption = (value) => {\n  //   setShowDropdownOptions(true);\n  //   setSearch(value);\n  // };\n  // const closeDropdownOption = () => {\n  //   setShowDropdownOptions(false);\n  // };\n  // const onSelectOption = (value, option) => {\n  //   setSearch(value);\n  //   closeDropdownOption();\n  // };\n  // const onSearch = () => {\n  //   if (!search || search === \"\") {\n  //     router.push(\"/\");\n  //   } else {\n  //     router.push({\n  //       pathname: \"/\",\n  //       query: { q: search },\n  //     });\n  //   }\n  // };\n\n\n  return __jsx(\"div\", {\n    className: \"menu-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"menu-search__form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    className: \"menu-search__form-select\",\n    defaultValue: globalState.category,\n    style: {\n      width: 220\n    },\n    onChange: onSelectCateory,\n    value: globalState.category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, SHOP.category.map((item, index) => __jsx(Option, {\n    key: index,\n    value: item.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, item.name)))));\n}\n\nexport default React.memo(SearchBarMobile);","map":{"version":3,"sources":["E:/stora-next/Elementronics/src/components/header/elements/SearchBar.js"],"names":["React","useState","useEffect","Select","Button","AutoComplete","useSelector","useDispatch","useRouter","SHOP","setGlobalCategory","setGlobalSearch","setSubCategory","useDebounce","SearchBarMobile","fillData","placeholder","Option","dispatch","search","setSearch","globalState","state","globalReducer","deboundValue","onSelectCateory","value","category","width","map","item","index","name","memo"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,YAAzB,QAA6C,MAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,IAAT,QAAqB,yBAArB,C,CACA;;AACA,SAAQC,iBAAR,EAA0BC,eAA1B,QAAgD,sCAAhD;AACA,SAASC,cAAT,QAA+B,oCAA/B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;AAEA,SAASC,eAAT,CAAyB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAzB,EAAoD;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAad,MAAnB,CADkD,CAElD;;AAEA,QAAMe,QAAQ,GAAGX,WAAW,EAA5B;AAEA,QAAM;AAAA,OAACY,MAAD;AAAA,OAASC;AAAT,MAAsBnB,QAAQ,CAAC,EAAD,CAApC,CANkD,CAQlD;;AACA,QAAMoB,WAAW,GAAGf,WAAW,CAAEgB,KAAD,IAAWA,KAAK,CAACC,aAAlB,CAA/B;AAEA,QAAMC,YAAY,GAAGX,WAAW,CAACM,MAAD,EAAS,GAAT,CAAhC;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,QAAQ,CAACP,eAAe,CAACa,YAAD,CAAhB,CAAR;AACD,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT,CAbkD,CAiBlD;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,eAAe,GAAIC,KAAD,IAAW;AACjCR,IAAAA,QAAQ,CAACR,iBAAiB,CAACgB,KAAD,CAAlB,CAAR;AACAR,IAAAA,QAAQ,CAACN,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAHD,CAxBkD,CA6BlD;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,SAAS,EAAC,0BADZ;AAEE,IAAA,YAAY,EAAES,WAAW,CAACM,QAF5B;AAGE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAHT;AAIE,IAAA,QAAQ,EAAEH,eAJZ;AAKE,IAAA,KAAK,EAAEJ,WAAW,CAACM,QALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGlB,IAAI,CAACkB,QAAL,CAAcE,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,KACjB,MAAC,MAAD;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,KAAK,EAAED,IAAI,CAACE,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACE,IADR,CADD,CAPH,CADF,CADF,CADF;AAsCD;;AAED,eAAehC,KAAK,CAACiC,IAAN,CAAWnB,eAAX,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Select, Button, AutoComplete } from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useRouter } from \"next/router\";\r\nimport { SHOP } from \"../../../common/defines\";\r\n// import { getProductsByCategory } from \"../../../common/shopUtils\";\r\nimport {setGlobalCategory,setGlobalSearch} from \"../../../redux/actions/globalActions\";\r\nimport { setSubCategory } from \"../../../redux/actions/shopActions\";\r\nimport useDebounce from \"../../../common/useDebound\";\r\n\r\nfunction SearchBarMobile({ fillData, placeholder }) {\r\n  const { Option } = Select;\r\n  // const router = useRouter();\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  // const [showDropdownOptions, setShowDropdownOptions] = useState(false);\r\n  const globalState = useSelector((state) => state.globalReducer);\r\n\r\n  const deboundValue = useDebounce(search, 300);\r\n\r\n  useEffect(() => {\r\n    dispatch(setGlobalSearch(deboundValue));\r\n  }, [deboundValue]);\r\n\r\n  // const renderAutoFillItem = () => {\r\n  //   let product = getProductsByCategory(fillData, globalState.category);\r\n  //   return product.map((item) => ({\r\n  //     value: item.name,\r\n  //   }));\r\n  // };\r\n\r\n  const onSelectCateory = (value) => {\r\n    dispatch(setGlobalCategory(value));\r\n    dispatch(setSubCategory(\"\"));\r\n  };\r\n\r\n  // const openDropdownOption = (value) => {\r\n  //   setShowDropdownOptions(true);\r\n  //   setSearch(value);\r\n  // };\r\n\r\n  // const closeDropdownOption = () => {\r\n  //   setShowDropdownOptions(false);\r\n  // };\r\n\r\n  // const onSelectOption = (value, option) => {\r\n  //   setSearch(value);\r\n  //   closeDropdownOption();\r\n  // };\r\n  \r\n  // const onSearch = () => {\r\n  //   if (!search || search === \"\") {\r\n  //     router.push(\"/\");\r\n  //   } else {\r\n  //     router.push({\r\n  //       pathname: \"/\",\r\n  //       query: { q: search },\r\n  //     });\r\n  //   }\r\n  // };\r\n  return (\r\n    <div className=\"menu-search\">\r\n      <div className=\"menu-search__form\">\r\n        <Select\r\n          className=\"menu-search__form-select\"\r\n          defaultValue={globalState.category}\r\n          style={{ width: 220}}\r\n          onChange={onSelectCateory}\r\n          value={globalState.category}\r\n        >\r\n          {SHOP.category.map((item, index) => (\r\n            <Option key={index} value={item.name}>\r\n              {item.name}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n        {/* <div className=\"menu-search__form-input\">\r\n          <AutoComplete\r\n            allowClear\r\n            backfill={true}\r\n            open={showDropdownOptions}\r\n            onSearch={openDropdownOption}\r\n            onBlur={closeDropdownOption}\r\n            onSelect={onSelectOption}\r\n            options={renderAutoFillItem()}\r\n            placeholder={placeholder}\r\n            filterOption={(inputValue, option) =>\r\n              option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !==\r\n              -1\r\n            }\r\n          />\r\n          <Button onClick={onSearch}>\r\n            <i className=\"icon_search\" />\r\n          </Button>\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(SearchBarMobile);\r\n"]},"metadata":{},"sourceType":"module"}