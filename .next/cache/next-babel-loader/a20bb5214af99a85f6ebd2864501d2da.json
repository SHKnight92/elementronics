{"ast":null,"code":"var _jsxFileName = \"F:\\\\stora-next\\\\Elementronics\\\\src\\\\components\\\\header\\\\elements\\\\SearchBar.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Button, AutoComplete } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport { getProductsByCategory } from \"../../../common/shopUtils\";\nimport { setGlobalCategory, setGlobalSearch } from \"../../../redux/actions/globalActions\";\nimport { setSubCategory } from \"../../../redux/actions/shopActions\";\nimport useDebounce from \"../../../common/useDebound\";\n\nfunction SearchBarMobile(_ref) {\n  _s();\n\n  var fillData = _ref.fillData,\n      placeholder = _ref.placeholder;\n  var router = useRouter();\n  var dispatch = useDispatch();\n\n  var _useState = useState(\"\"),\n      search = _useState[0],\n      setSearch = _useState[1];\n\n  var _useState2 = useState(false),\n      showDropdownOptions = _useState2[0],\n      setShowDropdownOptions = _useState2[1];\n\n  var globalState = useSelector(function (state) {\n    return state.globalReducer;\n  });\n  var deboundValue = useDebounce(search, 300);\n  useEffect(function () {\n    dispatch(setGlobalSearch(deboundValue));\n  }, [deboundValue]);\n\n  var renderAutoFillItem = function renderAutoFillItem() {\n    var product = getProductsByCategory(fillData, globalState.category);\n    return product.map(function (item) {\n      return {\n        value: item.name\n      };\n    });\n  };\n\n  var openDropdownOption = function openDropdownOption(value) {\n    setShowDropdownOptions(true);\n    setSearch(value);\n  };\n\n  var closeDropdownOption = function closeDropdownOption() {\n    setShowDropdownOptions(false);\n  };\n\n  var onSelectOption = function onSelectOption(value, option) {\n    setSearch(value);\n    closeDropdownOption();\n  };\n\n  var onSearch = function onSearch() {\n    if (!search || search === \"\") {\n      router.push(\"/\");\n    } else {\n      router.push({\n        pathname: \"/\",\n        query: {\n          q: search\n        }\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"menu-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"menu-search__form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"menu-search__form-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, __jsx(AutoComplete, {\n    allowClear: true,\n    backfill: true,\n    open: showDropdownOptions,\n    onSearch: openDropdownOption,\n    onBlur: closeDropdownOption,\n    onSelect: onSelectOption,\n    options: renderAutoFillItem(),\n    placeholder: placeholder,\n    filterOption: function filterOption(inputValue, option) {\n      return option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    onClick: onSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, __jsx(\"i\", {\n    className: \"icon_search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  })))));\n}\n\n_s(SearchBarMobile, \"EmRehdJSQPDyleUnWZMxXhDvbjU=\", false, function () {\n  return [useRouter, useDispatch, useSelector, useDebounce];\n});\n\n_c = SearchBarMobile;\nexport default _c2 = React.memo(SearchBarMobile);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SearchBarMobile\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["F:/stora-next/Elementronics/src/components/header/elements/SearchBar.js"],"names":["React","useState","useEffect","Button","AutoComplete","useSelector","useDispatch","useRouter","getProductsByCategory","setGlobalCategory","setGlobalSearch","setSubCategory","useDebounce","SearchBarMobile","fillData","placeholder","router","dispatch","search","setSearch","showDropdownOptions","setShowDropdownOptions","globalState","state","globalReducer","deboundValue","renderAutoFillItem","product","category","map","item","value","name","openDropdownOption","closeDropdownOption","onSelectOption","option","onSearch","push","pathname","query","q","inputValue","toUpperCase","indexOf","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, AutoComplete } from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useRouter } from \"next/router\";\r\nimport { getProductsByCategory } from \"../../../common/shopUtils\";\r\nimport {\r\n  setGlobalCategory,\r\n  setGlobalSearch,\r\n} from \"../../../redux/actions/globalActions\";\r\nimport { setSubCategory } from \"../../../redux/actions/shopActions\";\r\nimport useDebounce from \"../../../common/useDebound\";\r\n\r\nfunction SearchBarMobile({ fillData, placeholder }) {\r\n  const router = useRouter();\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const [showDropdownOptions, setShowDropdownOptions] = useState(false);\r\n  const globalState = useSelector((state) => state.globalReducer);\r\n\r\n  const deboundValue = useDebounce(search, 300);\r\n\r\n  useEffect(() => {\r\n    dispatch(setGlobalSearch(deboundValue));\r\n  }, [deboundValue]);\r\n\r\n  const renderAutoFillItem = () => {\r\n    let product = getProductsByCategory(fillData, globalState.category);\r\n    return product.map((item) => ({\r\n      value: item.name,\r\n    }));\r\n  };\r\n\r\n  const openDropdownOption = (value) => {\r\n    setShowDropdownOptions(true);\r\n    setSearch(value);\r\n  };\r\n\r\n  const closeDropdownOption = () => {\r\n    setShowDropdownOptions(false);\r\n  };\r\n\r\n  const onSelectOption = (value, option) => {\r\n    setSearch(value);\r\n    closeDropdownOption();\r\n  };\r\n  \r\n  const onSearch = () => {\r\n    if (!search || search === \"\") {\r\n      router.push(\"/\");\r\n    } else {\r\n      router.push({\r\n        pathname: \"/\",\r\n        query: { q: search },\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"menu-search\">\r\n      <div className=\"menu-search__form\">\r\n        <div className=\"menu-search__form-input\">\r\n          <AutoComplete\r\n            allowClear\r\n            backfill={true}\r\n            open={showDropdownOptions}\r\n            onSearch={openDropdownOption}\r\n            onBlur={closeDropdownOption}\r\n            onSelect={onSelectOption}\r\n            options={renderAutoFillItem()}\r\n            placeholder={placeholder}\r\n            filterOption={(inputValue, option) =>\r\n              option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !==\r\n              -1\r\n            }\r\n          />\r\n          <Button onClick={onSearch}>\r\n            <i className=\"icon_search\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(SearchBarMobile);\r\n"]},"metadata":{},"sourceType":"module"}